const params = {
  tabTitle: 'Элементы теории алгоритмов',
  styleFile: 'theme',
  title: 'Элементы теории алгоритмов',
  content: [
    { type: "parag", text: `В данном разделе изучаются формализация понятия алгоритма в виде машины Тьюринга, рекурсивные функции и алгоритмически неразрешимые проблемы.` },
    { type: "header", text: `Понятие алгоритма` },
    { type: "parag", text: `Интуитивное представление об алгоритме как о формальном предписании, которое определяет совокупность операций и порядок их выполнения для решения всех задач какого-либотипа,
    существует в математике с давних времен. В современных вычислительных системах алгоритмический подход к решению задач реализуется как императивное программирование.
    Термин "алгоритм" происходит от имени средневекового узбекского математика альХорезми, который еще в IX веке сформировал правила выполнения арифметических действий, которые мы изучаем в школе.
    Под алгоритмом обычно понимается точное предписание, определяющее процесс переработки исходных данных в требуемый результат.` },
    { type: "table", text: `При этом требуется:` },
    { type: "list", text: `чтобы исходные данные были заданы в конкретном алфавите и могли принимать значения из некоторого множества, т.е. носили массовый характер;` },
    { type: "list", text: `чтобы процесс переработки данных состоял из отдельных дискретных шагов и был детерминированным;` },
    { type: "list", text: `чтобы были четко указаны условия остановки процесса, и что следует считать результатом процесса.` },
    { type: "parag", text: `Таким образом, любой алгоритм характеризуется массовостью, детерминированностью и результативностью.
    Для решения любой массовой задачи требуется построить соответствующий алгоритм, поэтому важность понятия алгоритма трудно переоценить.` },
    { type: "parag", text: `Математика накопила большое число алгоритмов для решения разнообразных задач. В то же время попытки решения ряда задач натолкнулись на трудности, которые не удалось преодолеть.
    Возникла необходимость доказать существование алгоритма (алгоритмическую разрешимость) или принципиальную невозможность построения алгоритма (алгоритмическую неразрешимость) для ряда важных задач.` },
    { type: "parag", text: `Между тем, сформулированное выше понятие алгоритма нельзя считать точным определением, моделью алгоритма. Поэтому были предложены точные математические модели, уточняющие понятие алгоритма:
    машина Тьюринга, система рекурсивных функций Клини, нормальный алгоритм А.А.Маркова, схема Колмогорова-Успенского,лямбда-конверсииЧерча, финитные комбинаторные процессы Поста.` },
    { type: "parag", text: `А.Черч впервые обосновал положение о том, что все уточнения понятия алгоритма эквивалентны ("тезис Черча"), т.е. правильно отражают интуитивное представление об алгоритмах, сложившееся в математике.` },
    { type: "parag", text: `С помощью этих моделей алгоритма доказана алгоритмическая неразрешимость ряда важных задач математики и вычислительной техники и, в частности,
    неразрешимость проблемы останова универсальной вычислительной машины, реализующей любой алгоритм.
    Например, из алгоритмической неразрешимости проблемы останова следует важный практический выводневозможно создать универсальную отладочную программу для обнаружения возможности зацикливания
    отлаживаемой программы.` },
    { type: "parag", text: `Алгоритмически неразрешимой оказалась проблема выводимости в исчислении предикатов: для любых формул P иQ узнать, существует ли дедуктивная цепочка,
    ведущая отP кQ. Однако для исчисления высказываний и одноместных предикатов проблема выводимости разрешима.` },
    { type: "parag", text: `Алгоритмическая неразрешимость некоторой задачи означает, что не существует общего алгоритма, решающего любую задачу рассматриваемого класса,
    однако для отдельных подклассов алгоритмически неразрешимой задачи может существовать алгоритм. Не следует смешивать алгоритмическую неразрешимость какой-либопроблемы с положением,
    когда некоторая проблема еще не решена. Для нерешенных проблем остается надежда найти разрешающий алгоритм, тогда как для алгоритмически неразрешимых проблем любые попытки поиска алгоритма бесполезны.` },
    { type: "parag", text: `Прикладная теория алгоритмов базируется на выводах теории алгоритмов об алгоритмической разрешимости тех или иных проблем, но занимается, главным образом,
    разработкой наиболее эффективных с точки зрения практики алгоритмов, способов их описания, преобразования и реализации на современных ЭВМ.` },
    { type: "parag", text: `Алгоритм рассматривается как совокупность определенным образом связанных между собой операторов, представляющих элементарные операции,
    которые производятся над множеством подвергающихся переработке объектов. Способы реализации операторов предполагаются известными (как правило, операторы сами являются некоторыми стандартными алгоритмами).
    При решении конкретной задачи задаются также значения исходных данных и параметров, входящих в описание алгоритма.` },
    { type: "parag", text: `Для описания алгоритмов используются различные методы, отличающиеся степенью детализации и формализации. Теоретическое описание обычно дается в повествовательно-формальномизложении,
    цель которого – обосновать без лишних подробностей процедуру, предлагаемую в качестве алгоритма. Для наглядного представления структуры алгоритмов широко применяются графические средства:
    графы, блок-схемы,сети. Формальное и полное описание алгоритмов осуществляется на специально разработанных алгоритмических языках (BASIC, FORTRAN, PASCAL, C и др.);
    такое описание содержит всю необходимую для реализации алгоритма информацию, но не связано непосредственно со специфическими особенностями вычислительных машин.` },
    { type: "header", text: `Машина Тьюринга` },
    { type: "parag", text: `Модель алгоритма, называемая машиной Тьюринга [1,5,11,14-19],состоит из бесконечной ленты (БЛ), разделенной на ячейки, и управляющей головки (УГ),
    которая перемещается по ленте и способна считывать символ в ячейке, против которой она находится, а также замещать обозреваемый символ новым.
    В каждой ячейке может быть записан один символов из ленточного алфавита A. Головка может находиться в одном из внутренних состояний, принадлежащих конечному множеству (алфавиту состояний)Q.
    Работа машины происходит в дискретном времени в соответствии с программой, задаваемой набором команд вида.` },
    { type: "parag", text: `qa → a+Dq+` },
    { type: "parag", text: `В зависимости от состояния головки q Q и символаa A, против которого она стоит, головка записывает на ленте новый символa+ (или оставляет старый),
    переходит в новое состояниеq+ (или остается в старом) и передвигается: вправо (П), влево (Л) или остается в прежнем положении (Н).` },
    { type: "size_3", text: `Определение 5.1.`}
    { type: "parag", text: `Назовем конфигурацией машины Тьюринга Kt в момент t содержимое ее ленты, состояние головки q Q и обозреваемый ею символa.` },
    { type: "parag", text: `Пусть на ленте записана цепочка символов …Λa1a3a1a2a3a1Λ…, слева и справа от которой свободные ячейки (содержат символΛ), причем головка, находясь в состоянииqi, обозревает символa2.
    Соответствующую конфигурацию будем записывать, помещая обозначение состояния головки перед обозреваемым символом:a1a3a1qi a2a3a1.` },
    { type: "size_3", text: `Определение 5.2.` },
    { type: "parag", text: `Конфигурация машины Тьюринга называетсязаключительной, если головка машины Тьюринга находится в состоянии останова q0.` },
    { type: "parag", text: `Работу машины Тьюринга можно описать как последовательную смену ее конфигураций, причем машина переходит от конфигурации Kt к конфигурацииKt+1 в соответствии со своей программой.
    Любая начальная конфигурацияK0, которой соответствует состояниеq1, порождает последовательность конфигурацийK0,K1,K2, …,Kt,… .` },
    { type: "parag", text: `Эта последовательность обрывается, если машина оказывается в заключительной конфигурации. В этом случае будем говорить, что машина Тьюринга применима к конфигурации K0.` },
    { type: "parag", text: `Если последовательность конфигураций K0,K1,K2, …,Kt,… никогда не обрывается, т.е. машина работает вечно (“зацикливается”), будем говорить, что машина Тьюринганеприменима к конфигурации K0.` },
    { type: "parag", text: `Для решения задачи исходные данные должны быть закодированы некоторым “естественным” образом символами некоторого алфавита A и записаны в виде слова X на ленте машины,
    причем головка в начальном состоянии q1 Q обозревает самый левый символ словаX, т.е. начальная конфигурация имеет видq1X. Результирующая конфигурация имеет видq0 f(X).` },
    { type: "parag", text: `Вэтом случае будем говорить, что машина Тьюринга вычисляет словарную функцию f, причем словоf(X) есть значение этой функции для аргументаX. Числовые функции – это частный случай словарных,
    поскольку конкретный вид символов, которыми оперирует машина, несуществен, также как и тип данных: цифровых,алфавитно-цифровыхи т.д.` },
    { type: "parag", text: `Втеории алгоритмов рассматриваются примеры специализированных машин Тьюринга с ленточным алфавитом A={Λ,+,1}, алфавитом состояний {q0,q1,q2, …,qn} и алфавитом перемещенийD {П,Л,Н}.
    Символ Λ играет роль разделителя. Символы q1,q0 – соответственно начальное и заключительное состояние машины (останов).` },
    { type: "parag", text: `Рассматриваемые машины выполняют арифметические операции над неотрицательными целыми числами, для представления которых используется унитарный код.
      Число x представляется(x+1)-йединицей, причем отдельно записанная единица представляет нулевое значение x.` },
  ],


}

module.exports = params;
